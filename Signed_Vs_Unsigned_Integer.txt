2's complement works the following way. Let's say you have the signed integer 10011, you want to know what decimal is is.

Flip all the bits: 10011 --> 01100
Add 1: 01100 --> 01101
Read it as an unsigned integer: 01101 = 0*2^4 + 1*2^3 + 1*2^2 + 0*2^1 + 1*2^0 = 13.
10011 represents -13. This representation is very handy because it works both ways. How to represent -7 as a binary signed integer ? 
Start with the binary representation of 7 which is 00111.

Flip all the bits: 00111 --> 11000
Add 1: 11000 --> 11001
And that's it ! On 5 bits, -7 is represented by 11001.

I won't cover it, but another great advantage with 2's complement is that the addition works the same way. 
That is, When adding two binary numbers you do not have to care if they are signed or unsigned, this is the same algorithm behind.

In computing, integers (whole numbers) are typically represented using a fixed number of bits (binary digits) in a computer's memory. The choice of whether to use a signed or unsigned integer representation depends on the specific needs of the program.

Signed integers represent both positive and negative numbers, whereas unsigned integers only represent non-negative numbers (i.e., zero and positive numbers).

In signed integer representation, the leftmost (most significant) bit is used to indicate the sign of the number. A value of 0 in the leftmost bit indicates a positive number, while a value of 1 indicates a negative number. The remaining bits represent the magnitude of the number.

For example, in a 4-bit signed integer representation, the range of values that can be represented is -8 to 7, with the leftmost bit indicating the sign:

-8: 1000
-7: 1001
-6: 1010
-5: 1011
-4: 1100
-3: 1101
-2: 1110
-1: 1111
0: 0000
1: 0001
2: 0010
3: 0011
4: 0100
5: 0101
6: 0110
7: 0111

Unsigned integers, on the other hand, do not use the leftmost bit to represent the sign of the number. Instead, all bits are used to represent the magnitude of the number, allowing for a larger range of non-negative values.

For example, in a 4-bit unsigned integer representation, the range of values that can be represented is 0 to 15:

0: 0000
1: 0001
2: 0010
3: 0011
4: 0100
5: 0101
6: 0110
7: 0111
8: 1000
9: 1001
10: 1010
11: 1011
12: 1100
13: 1101
14: 1110
15: 1111

In summary, the choice between signed and unsigned integer representation depends on the specific requirements of the program, such as the range of values to be represented and whether negative numbers need to be represented.
